AWSTemplateFormatVersion: 2010-09-09
Description: Serverless (API Gateway) website that returns AWS IP prefixes from ip-ranges.json (see https://github.com/aws-samples/aws-ipranges-api)

Metadata:
  License:
    Description: >
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
      SPDX-License-Identifier: MIT-0
      
      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Parameters:
  allowNetworks:
    Type: String
    Description: Source internet IP subnets that are authorized to use API Gateway separated by commas (e.g. 1.2.3.4/32,100.0.0.0/24)
    Default: 0.0.0.0/0
  lambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Description: Name of Lambda function used by API Gateway
    Default: aws-ipranges-api
  lambdaAuthorizerFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Description: Name of Lambda function used by API Gateway Authorizer
    Default: aws-ipranges-api-authorizer
  pythonRuntime:
    Type: String
    AllowedPattern: "python3\\.\\d{1,2}"
    Description: Python 3 runtime version
    Default: python3.9
  cpuArchitecture:
    Type: String
    AllowedValues:
      - x86_64
      - arm64
    Description: Instruction set architecture (Intel/AMD or Graviton)
    Default: arm64
  awsServices:
    Type: String
    Default: CLOUDFRONT_ORIGIN_FACING,ROUTE53_HEALTHCHECKS
    Description: Name of AWS services to retrieve separated by commas (see https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html)

Resources:
  apiGateway:
    Type: AWS::ApiGatewayV2::Api
    DependsOn: 
      - lambdaFunction
      - lambdaAuthorizerFunction
    Properties:
      Name: !Sub "${AWS::StackName}-apiGateway"
      Description: !Sub "[${AWS::StackName}] - returns AWS IP prefixes from ip-ranges.json"
      ProtocolType: HTTP
      Tags: 
        StackName: !Sub ${AWS::StackName}
        StackId: !Sub ${AWS::StackId}        
        LambdaFunction: !Ref lambdaFunctionName
        LambdaAuthorizerFunction: !Ref lambdaAuthorizerFunctionName
        GitHub: 'https://github.com/aws-samples/aws-ipranges-api'
        
  apiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: '$default'
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref apiAuthorizer
      Target: !Join
        - /
        - - integrations
          - !Ref apiGatewayIntegration
  
  # See https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html#apigateway-permissions
  apiTriggerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref apiGateway
          - '/*'

  # Uri at https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-custom-integrations.html
  apiGatewayIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref apiGateway
      Description: !Sub '[${AWS::StackName}]: Lambda integration with [${apiGateway}]'
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt lambdaFunction.Arn
          - /invocations
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 25000
  
  # Account limits at https://docs.aws.amazon.com/apigateway/latest/developerguide/limits.html#apigateway-account-level-limits-table
  apiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: $default
      Description: Prod Stage
      AutoDeploy: true
      ApiId: !Ref apiGateway
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        #ThrottlingBurstLimit: 50
        #ThrottlingRateLimit: 10
      Tags: 
        StackName: !Sub ${AWS::StackName}
        StackId: !Sub ${AWS::StackId}
        LambdaFunction: !Ref lambdaFunctionName
        GitHub: 'https://github.com/aws-samples/aws-ipranges-api'

  lambdaFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: lambdaFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/aws-ipranges-api
        - Key: Description
          Value: !Sub 'For lambda function ${lambdaFunctionName}'

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "[${AWS::StackName}] - Returns AWS IP prefixes for API Gateway"
      FunctionName: !Ref lambdaFunctionName
      Handler: "index.lambda_handler"
      MemorySize: 1024
      Role: !GetAtt lambdaFunctionIamRole.Arn
      Environment:
        Variables:
          SERVICES: !Ref awsServices
      Runtime: !Ref pythonRuntime 
      Timeout: 25
      Architectures:
      - !Ref cpuArchitecture
      Code:
        ZipFile: |
            # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            # SPDX-License-Identifier: MIT-0
            
            import os
            import json
            from urllib import request
            import ipaddress

            # AWS services to return for default API
            default_services = os.getenv('SERVICES', 'CLOUDFRONT_ORIGIN_FACING,ROUTE53_HEALTHCHECKS').split(',')
            if default_services == ['']: 
              default_services = ['CLOUDFRONT_ORIGIN_FACING','ROUTE53_HEALTHCHECKS']

            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html for payload format
            def lambda_handler(event, context):  
            
              # load ip-ranges.json
              response = request.urlopen('https://ip-ranges.amazonaws.com/ip-ranges.json')
              data = response.read()
              ipranges_json = json.loads(data)
              
              url = event['requestContext']['http']['path']
              if url.lower() == '/favicon.ico':
                return {
                  'statusCode': 404,
                  'body': 'Not Found!',
                  "headers": {
                      "content-type": "text/html"                 
                    }        
                  }   
              elif url.lower() == '/robots.txt':
                return {
                  'statusCode': 200,
                  'body' : 'User-agent: *\nDisallow: /',
                  "headers": {
                     "content-type": "text/plain" 
                  }
                }

              # available aws services/regions/network_border_groups
              all_aws_services = list()
              all_aws_regions = list()
              all_aws_networks = list()

              for i in ipranges_json['prefixes']:
                if i['service'] not in all_aws_services:
                  all_aws_services.append(i['service'])
                if i['region'] not in all_aws_regions:
                  all_aws_regions.append(i['region'])
                if i['network_border_group'] not in all_aws_networks:
                  all_aws_networks.append(i['network_border_group'])
              

              args = url.split('/')
              responseBody = ''
              
              # SERVICES and REGIONS to filter by?            
              SERVICES = all_aws_services.copy()
              REGIONS = all_aws_regions.copy()
              NETWORKS = all_aws_networks.copy()              
              # return list of all prefixes / services / regions / network_border_groups
              if len(args) == 2:
                SERVICES = default_services
                if args[1].upper() == 'SERVICE':
                  responseBody = all_aws_services
                elif args[1].upper() == 'REGION':
                  responseBody = all_aws_regions
                elif args[1].upper() == 'NETWORK':
                  responseBody = all_aws_networks                
                if responseBody != '':
                  return {
                    'statusCode': 200,
                    'body': '\n'.join(sorted(responseBody)),
                    "headers": {
                      "content-type": "text/plain",
                      "path" : url,
                      "syncToken": ipranges_json['syncToken'],
                      "createDate": ipranges_json['createDate']
                      }        
                  }
              elif len(args) >= 3:
                # /SERVICE/<SERVICE>/<REGION>
                if args[1].upper()=='SERVICE' and args[2] in all_aws_services:
                  SERVICES = [args[2]]                  
                  if len(args) >=4 and args[3] in all_aws_regions:
                    REGIONS = [args[3]]
                # /REGION/<REGION>/<SERVICE>
                elif args[1].upper()=='REGION' and args[2] in all_aws_regions:
                  REGIONS = [args[2]]
                  if len(args) >=4 and args[3] in all_aws_services:
                    SERVICES= [args[3]]
                # /NETWORK/<NETWORK>/<SERVICE>
                elif args[1].upper()=='NETWORK' and args[2] in all_aws_networks:
                  NETWORKS = [args[2]]
                  if len(args) >=4 and args[3] in all_aws_services:
                    SERVICES= [args[3]]
                else:
                  return {
                    'statusCode': 404,
                    'body': 'Not Found!',
                    "headers": {
                      "content-type": "text/html"                 
                    }        
                  }                  
                
              # IPv4 / IPv6 only? : 
              ipv4_only = url.upper().endswith('/IPV4.TXT')
              ipv6_only = url.upper().endswith('/IPV6.TXT')              

              prefixes = ''              
              aws_region = list()
              aws_service = list()
              aws_network = list()

              ipv4_prefixes = list()
              if not ipv6_only:
                for i in ipranges_json['prefixes']:
                  if i['service'] in SERVICES and i['region'] in REGIONS and i['network_border_group'] in NETWORKS and i['ip_prefix'] not in ipv4_prefixes:
                    ipv4_prefixes.append(i['ip_prefix'])
                    if i['region'] not in aws_region:
                      aws_region.append(i['region'])
                    if i['service'] not in aws_service:
                      aws_service.append(i['service'])
                    if i['network_border_group'] not in aws_network:
                      aws_network.append(i['network_border_group'])
                
                prefixes = '\n'.join(sorted(ipv4_prefixes, key = ipaddress.IPv4Network)) 

              ipv6_prefixes = list()  
              if not ipv4_only:
                for i in ipranges_json['ipv6_prefixes']:
                  if i['service'] in SERVICES and i['region'] in REGIONS and i['network_border_group'] in NETWORKS and i['ipv6_prefix'] not in ipv6_prefixes:
                    ipv6_prefixes.append(i['ipv6_prefix'])
                    if i['region'] not in aws_region:
                      aws_region.append(i['region'])
                    if i['service'] not in aws_service:
                      aws_service.append(i['service'])
                    if i['network_border_group'] not in aws_network:
                      aws_network.append(i['network_border_group'])
                if len(prefixes) > 0:
                  prefixes += '\n'              
                prefixes += '\n'.join(sorted(ipv6_prefixes, key = ipaddress.IPv6Network))

              sourceIp = event['requestContext']['http']['sourceIp']
              createDate = ipranges_json['createDate'] 
              syncToken = ipranges_json['syncToken']
              print(f'Source IP:{sourceIp}, Path:{url}, IPv4 Prefixes:{len(ipv4_prefixes)}, IPv6 Prefixes:{len(ipv6_prefixes)}, createDate:{createDate}, syncToken:{syncToken}')
              return {
                'statusCode': 200,
                'body': prefixes,
                "headers": {
                  "content-type": "text/plain",
                  "aws-service" : ','.join(sorted(aws_service)),
                  "aws-region" : ','.join(sorted(aws_region)),
                  "aws-network" : ','.join(sorted(aws_network)),
                  "path" : url,
                  "syncToken": syncToken,
                  "createDate": createDate               
                  }        
                }
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/aws-ipranges-api
        - Key: Description
          Value: Returns AWS IP prefixes from ip-ranges.json

  lambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref lambdaFunction
      Description: v1.0

  apiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties: 
      ApiId: !Ref apiGateway
      AuthorizerType: REQUEST 
      AuthorizerPayloadFormatVersion: 2.0
      AuthorizerResultTtlInSeconds: 10
      IdentitySource: 
        - $context.identity.sourceIp     
      AuthorizerUri: !Join
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt lambdaAuthorizerFunction.Arn
          - /invocations
      EnableSimpleResponses: True
      Name: !Sub "${AWS::StackName}-authorizer"

  lambdaAuthorizerFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: lambdaAuthorizerFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaAuthorizerFunctionName}:*
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/aws-ipranges-api
        - Key: Description
          Value: !Sub 'For lambda function ${lambdaAuthorizerFunctionName}'

  lambdaAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "[${AWS::StackName}] - Lambda Authorizer for API Gateway"
      FunctionName: !Ref lambdaAuthorizerFunctionName
      Handler: "index.lambda_handler"
      MemorySize: 128
      Role: !GetAtt lambdaAuthorizerFunctionIamRole.Arn
      Environment:
        Variables:
          ALLOWED_NETWORKS: !Ref allowNetworks
      Runtime: !Ref pythonRuntime 
      Timeout: 5
      Architectures:
      - !Ref cpuArchitecture
      Code:
        ZipFile: | 
            # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            # SPDX-License-Identifier: MIT-0
            
            import os
            import ipaddress

            # AWS services to return for default API
            allowed_networks = os.getenv('ALLOWED_NETWORKS', '0.0.0.0/0').split(',')
            if allowed_networks == ['']: 
              allowed_networks = ['0.0.0.0/0']

            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html for payload format
            def lambda_handler(event, context):
              sourceIp = event['requestContext']['http']['sourceIp']

              print(f'Source IP:{sourceIp}, Allowed Networks:{allowed_networks}')
              source_address = ipaddress.ip_address(sourceIp)
              for allowed in allowed_networks:              
                if source_address in ipaddress.ip_network(allowed, False):
                  print('Authorized: Yes')
                  return { 
                    "isAuthorized": True
                  }
              
              print('Authorized: No')
              return {
                "isAuthorized": False
              }
      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}
        - Key: GitHub
          Value: https://github.com/aws-samples/aws-ipranges-api
        - Key: Description
          Value: !Sub "Authorizer for ${AWS::StackName}-apiGateway"

  lambdaAuthorizerVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref lambdaAuthorizerFunction
      Description: v1.0

  apiTriggerAuthorizerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaAuthorizerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref apiGateway
          - '/*'


Outputs:
  apiGatewayInvokeURL:
    Description: URL of API Gateway for use by firewall or application
    Value: !GetAtt apiGateway.ApiEndpoint
  lambdaFunctionCloudWatchLog:
    Description: Cloudwatch log for Lambda function
    Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F${lambdaFunctionName}"
  lambdaAuthorizerFunctionCloudWatchLog:
    Description: Cloudwatch log for Lambda authorizer function
    Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252Faws$252Flambda$252F${lambdaAuthorizerFunctionName}"
